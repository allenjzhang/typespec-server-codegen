// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Todo;

namespace Todo.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class TodoModelFactory
    {
        /// <summary> The TodoPage. </summary>
        /// <param name="items"> The items in the page. </param>
        /// <param name="pageSize"> The number of items returned in this page. </param>
        /// <param name="totalSize"> The total number of items. </param>
        /// <param name="prevLink"> A link to the previous page, if it exists. </param>
        /// <param name="nextLink"> A link to the next page, if it exists. </param>
        /// <returns> A new <see cref="Models.TodoPage"/> instance for mocking. </returns>
        public static TodoPage TodoPage(IEnumerable<TodoItem> items = default, int pageSize = default, int totalSize = default, Uri prevLink = default, Uri nextLink = default)
        {
            items ??= new ChangeTrackingList<TodoItem>();

            return new TodoPage(
                items?.ToList(),
                pageSize,
                totalSize,
                prevLink,
                nextLink,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The TodoItem. </summary>
        /// <param name="id"> The item's unique id. </param>
        /// <param name="title"> The item's title. </param>
        /// <param name="createdBy"> User that created the todo. </param>
        /// <param name="assignedTo"> User that the todo is assigned to. </param>
        /// <param name="description"> A longer description of the todo item in markdown format. </param>
        /// <param name="status"> The status of the todo item. </param>
        /// <param name="createdAt"> When the todo item was created. </param>
        /// <param name="updatedAt"> When the todo item was last updated. </param>
        /// <param name="completedAt"> When the todo item was makred as completed. </param>
        /// <param name="labels"></param>
        /// <param name="dummy"></param>
        /// <returns> A new <see cref="Models.TodoItem"/> instance for mocking. </returns>
        public static TodoItem TodoItem(long id = default, string title = default, long createdBy = default, long? assignedTo = default, string description = default, TodoItemStatus status = default, DateTimeOffset createdAt = default, DateTimeOffset updatedAt = default, DateTimeOffset? completedAt = default, BinaryData labels = default, string dummy = default)
        {

            return new TodoItem(
                id,
                title,
                createdBy,
                assignedTo,
                description,
                status,
                createdAt,
                updatedAt,
                completedAt,
                labels,
                dummy,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The TodoLabelRecord. </summary>
        /// <param name="name"></param>
        /// <param name="color"></param>
        /// <returns> A new <see cref="Models.TodoLabelRecord"/> instance for mocking. </returns>
        public static TodoLabelRecord TodoLabelRecord(string name = default, string color = default)
        {

            return new TodoLabelRecord(name, color, additionalBinaryDataProperties: null);
        }

        /// <summary> The TodoAttachment. </summary>
        /// <param name="filename"> The file name of the attachment. </param>
        /// <param name="mediaType"> The media type of the attachment. </param>
        /// <param name="contents"> The contents of the file. </param>
        /// <returns> A new <see cref="Models.TodoAttachment"/> instance for mocking. </returns>
        public static TodoAttachment TodoAttachment(string filename = default, string mediaType = default, BinaryData contents = default)
        {

            return new TodoAttachment(filename, mediaType, contents, additionalBinaryDataProperties: null);
        }

        /// <summary> The CreateJsonResponse. </summary>
        /// <param name="id"> The item's unique id. </param>
        /// <param name="title"> The item's title. </param>
        /// <param name="createdBy"> User that created the todo. </param>
        /// <param name="assignedTo"> User that the todo is assigned to. </param>
        /// <param name="description"> A longer description of the todo item in markdown format. </param>
        /// <param name="status"> The status of the todo item. </param>
        /// <param name="createdAt"> When the todo item was created. </param>
        /// <param name="updatedAt"> When the todo item was last updated. </param>
        /// <param name="completedAt"> When the todo item was makred as completed. </param>
        /// <param name="labels"></param>
        /// <returns> A new <see cref="Models.CreateJsonResponse"/> instance for mocking. </returns>
        public static CreateJsonResponse CreateJsonResponse(long id = default, string title = default, long createdBy = default, long? assignedTo = default, string description = default, TodoItemStatus status = default, DateTimeOffset createdAt = default, DateTimeOffset updatedAt = default, DateTimeOffset? completedAt = default, BinaryData labels = default)
        {

            return new CreateJsonResponse(
                id,
                title,
                createdBy,
                assignedTo,
                description,
                status,
                createdAt,
                updatedAt,
                completedAt,
                labels,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The GetResponse. </summary>
        /// <param name="id"> The item's unique id. </param>
        /// <param name="title"> The item's title. </param>
        /// <param name="createdBy"> User that created the todo. </param>
        /// <param name="assignedTo"> User that the todo is assigned to. </param>
        /// <param name="description"> A longer description of the todo item in markdown format. </param>
        /// <param name="status"> The status of the todo item. </param>
        /// <param name="createdAt"> When the todo item was created. </param>
        /// <param name="updatedAt"> When the todo item was last updated. </param>
        /// <param name="completedAt"> When the todo item was makred as completed. </param>
        /// <param name="labels"></param>
        /// <returns> A new <see cref="Models.GetResponse"/> instance for mocking. </returns>
        public static GetResponse GetResponse(long id = default, string title = default, long createdBy = default, long? assignedTo = default, string description = default, TodoItemStatus status = default, DateTimeOffset createdAt = default, DateTimeOffset updatedAt = default, DateTimeOffset? completedAt = default, BinaryData labels = default)
        {

            return new GetResponse(
                id,
                title,
                createdBy,
                assignedTo,
                description,
                status,
                createdAt,
                updatedAt,
                completedAt,
                labels,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The TodoAttachmentList. </summary>
        /// <param name="items"></param>
        /// <returns> A new <see cref="Models.TodoAttachmentList"/> instance for mocking. </returns>
        public static TodoAttachmentList TodoAttachmentList(IEnumerable<TodoAttachment> items = default)
        {
            items ??= new ChangeTrackingList<TodoAttachment>();

            return new TodoAttachmentList(items?.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> The User. </summary>
        /// <param name="id"> An autogenerated unique id for the user. </param>
        /// <param name="username"> The user's username. </param>
        /// <param name="email"> The user's email address. </param>
        /// <param name="password">
        /// The user's password, provided when creating a user
        /// but is otherwise not visible (and hashed by the backend)
        /// </param>
        /// <returns> A new <see cref="Models.User"/> instance for mocking. </returns>
        public static User User(long id = default, string username = default, string email = default, string password = default)
        {

            return new User(id, username, email, password, additionalBinaryDataProperties: null);
        }

        /// <summary> The CreateResponse. </summary>
        /// <param name="id"> An autogenerated unique id for the user. </param>
        /// <param name="username"> The user's username. </param>
        /// <param name="email"> The user's email address. </param>
        /// <param name="token"> The token to use to construct the validate email address url. </param>
        /// <returns> A new <see cref="Models.CreateResponse"/> instance for mocking. </returns>
        public static CreateResponse CreateResponse(long id = default, string username = default, string email = default, string token = default)
        {

            return new CreateResponse(id, username, email, token, additionalBinaryDataProperties: null);
        }
    }
}
