// Code generated by Microsoft (R) TypeSpec Code Generator.

package todo;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClient;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;
import java.util.Objects;
import todo.implementation.MultipartFormDataHelper;
import todo.implementation.TodoItemsAttachmentsImpl;
import todo.todoitems.TodoAttachmentList;

/**
 * Initializes a new instance of the synchronous TodoClient type.
 */
@ServiceClient(builder = TodoClientBuilder.class)
public final class TodoItemsAttachmentsClient {
    @Metadata(generated = true)
    private final TodoItemsAttachmentsImpl serviceClient;

    /**
     * Initializes an instance of TodoItemsAttachmentsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    TodoItemsAttachmentsClient(TodoItemsAttachmentsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The list operation.
     * 
     * @param itemId The itemId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<TodoAttachmentList> listWithResponse(long itemId, RequestOptions requestOptions) {
        return this.serviceClient.listWithResponse(itemId, requestOptions);
    }

    /**
     * The createJsonAttachment operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     filename: String (Required)
     *     mediaType: String (Required)
     *     contents: byte[] (Required)
     * }
     * }
     * </pre>
     * 
     * @param itemId The itemId parameter.
     * @param contents The contents parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> createJsonAttachmentWithResponse(long itemId, BinaryData contents,
        RequestOptions requestOptions) {
        return this.serviceClient.createJsonAttachmentWithResponse(itemId, contents, requestOptions);
    }

    /**
     * The createFileAttachment operation.
     * 
     * @param itemId The itemId parameter.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    Response<Void> createFileAttachmentWithResponse(long itemId, BinaryData body, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createFileAttachment' is 'multipart/form-data'
        return this.serviceClient.createFileAttachmentWithResponse(itemId, body, requestOptions);
    }

    /**
     * The list operation.
     * 
     * @param itemId The itemId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public TodoAttachmentList list(long itemId) {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listWithResponse(itemId, requestOptions).getValue();
    }

    /**
     * The createJsonAttachment operation.
     * 
     * @param itemId The itemId parameter.
     * @param contents The contents parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void createJsonAttachment(long itemId, TodoAttachment contents) {
        // Generated convenience method for createJsonAttachmentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createJsonAttachmentWithResponse(itemId, BinaryData.fromObject(contents), requestOptions).getValue();
    }

    /**
     * The createFileAttachment operation.
     * 
     * @param itemId The itemId parameter.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void createFileAttachment(long itemId, FileAttachmentMultipartRequest body) {
        // Generated convenience method for createFileAttachmentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createFileAttachmentWithResponse(itemId,
            new MultipartFormDataHelper(requestOptions)
                .serializeTextField("contents", Objects.toString(body.getContents()))
                .end()
                .getRequestBody(),
            requestOptions).getValue();
    }
}
