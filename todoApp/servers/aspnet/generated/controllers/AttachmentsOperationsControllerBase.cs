// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using Todo.Service.Models;
using Todo.Service;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.AspNetCore.Http.Extensions;

namespace Todo.Service.Controllers
{
    [ApiController]
    public abstract partial class AttachmentsOperationsControllerBase : ControllerBase
    {

        internal abstract IAttachmentsOperations AttachmentsOperationsImpl { get; }


        [HttpGet]
        [Route("/items/{itemId}/attachments")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(PageTodoAttachment))]
        public virtual async Task<IActionResult> List(long itemId)
        {
            var result = await AttachmentsOperationsImpl.ListAsync(itemId);
            return Ok(result);
        }


        [HttpPost]
        [Route("/items/{itemId}/attachments")]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> CreateJsonAttachment(long itemId, TodoAttachment body)
        {
            await AttachmentsOperationsImpl.CreateJsonAttachmentAsync(itemId, body);
            return Ok();
        }


        [HttpPost]
        [Route("/items/{itemId}/attachments")]
        [Consumes("multipart/form-data")]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> CreateFileAttachment(long itemId, HttpRequest request, Stream body)
        {
            var boundary = request.GetMultipartBoundary();
            if (boundary == null)
            {
                return BadRequest("Request missing multipart boundary");
            }


            var reader = new MultipartReader(boundary, body);
            await AttachmentsOperationsImpl.CreateFileAttachmentAsync(itemId, reader);
            return Ok();
        }

    }
}
